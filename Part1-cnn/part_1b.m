%cnnPreprocess('..\Images_Data_Clipped');

load 'dataTeststore.mat';
load 'dataTrainstore.mat';

imageDim = 28;

randn('seed', 42);
s = RandStream('mcg16807','Seed', 42);
RandStream.setGlobalStream(s);

defaultLayers = [imageInputLayer([imageDim imageDim]), ...
    convolution2dLayer([5, 5],30), ...
    averagePooling2dLayer(2), ...
    convolution2dLayer([5, 5],70), ...
    averagePooling2dLayer(2), ...
    fullyConnectedLayer(10), ...
    softmaxLayer(), ...
    classificationLayer()];

defaultOptions = trainingOptions('sgdm', ... 
    'MaxEpochs', 20,...
    'InitialLearnRate', 1e-4, ...
    'MiniBatchSize', 200, ...
    'L2Regularization', 1e-3, ...
    'Momentum', 7e-1 ...
    );

defaultOptionsNoVerbose = trainingOptions('sgdm', ... 
    'MaxEpochs', defaultOptions.MaxEpochs,...
    'InitialLearnRate', defaultOptions.InitialLearnRate, ...
    'MiniBatchSize', defaultOptions.MiniBatchSize, ...
    'L2Regularization', defaultOptions.L2Regularization, ...
    'Momentum', defaultOptions.Momentum, ...
    'Verbose', 0 ...
    );

for num_layers=20:10:70
    layers = [imageInputLayer([imageDim imageDim]), ...
        convolution2dLayer([5, 5],30), ...
        averagePooling2dLayer(2), ...
        convolution2dLayer([5, 5],num_layers), ...
        averagePooling2dLayer(2), ...
        fullyConnectedLayer(10), ...
        softmaxLayer(), ...
        classificationLayer()];

    convnet = trainNetwork(dataTrainstore,layers,defaultOptionsNoVerbose);

    YTest = classify(convnet, dataTeststore);
    TTest = dataTeststore.Labels;
    accuracy = sum(YTest == TTest)/numel(YTest);
    
    filename=sprintf('conv2size-%d.mat', num_layers);
    fprintf('%s %.6f\n', filename, accuracy);
    
    save(filename, 'convnet');
end

for num_layers=20:10:70
    layers = [imageInputLayer([imageDim imageDim]), ...
        convolution2dLayer([5, 5],num_layers), ...
        averagePooling2dLayer(2), ...
        convolution2dLayer([5, 5],50), ...
        averagePooling2dLayer(2), ...
        fullyConnectedLayer(10), ...
        softmaxLayer(), ...
        classificationLayer()];

    convnet = trainNetwork(dataTrainstore,layers,defaultOptionsNoVerbose);

    YTest = classify(convnet, dataTeststore);
    TTest = dataTeststore.Labels;
    accuracy = sum(YTest == TTest)/numel(YTest);
    
    filename=sprintf('conv1size-%d.mat', num_layers);
    fprintf('%s %.6f\n', filename, accuracy);
    
    save(filename, 'convnet');
end

bestLayers = [imageInputLayer([imageDim imageDim]), ...
    convolution2dLayer([5, 5],50), ...
    averagePooling2dLayer(2), ...
    convolution2dLayer([5, 5],70), ...
    averagePooling2dLayer(2), ...
    fullyConnectedLayer(10), ...
    softmaxLayer(), ...
    classificationLayer()];

convnet = trainNetwork(dataTrainstore,bestLayers,defaultOptions);

YTest = classify(convnet, dataTeststore);
TTest = dataTeststore.Labels;
accuracy = sum(YTest == TTest)/numel(YTest);

filename=sprintf('part2-best.mat');
fprintf('%s %.6f\n', filename, accuracy);

save(filename, 'convnet');
